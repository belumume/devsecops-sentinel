#!/usr/bin/env python3
"""
Test script to verify vulnerability detection logic locally.
"""

import json
import subprocess
import tempfile
import os

def test_safety_locally():
    """Test safety tool locally with known vulnerable packages."""
    
    # Known vulnerable Python packages
    vulnerable_requirements = """
Django==2.0.1
requests==2.18.4
Pillow==5.0.0
PyYAML==3.12
urllib3==1.24.1
Jinja2==2.8
Flask==0.12.2
"""
    
    print("Testing safety tool locally...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        requirements_path = os.path.join(temp_dir, 'requirements.txt')
        
        with open(requirements_path, 'w') as f:
            f.write(vulnerable_requirements)
        
        # Test with python -m safety
        try:
            command = ['python', '-m', 'safety', 'check', '--json', '--file', requirements_path]
            result = subprocess.run(command, capture_output=True, text=True, check=False)
            
            print(f"Safety return code: {result.returncode}")
            print(f"Safety stdout: {result.stdout[:500]}...")
            print(f"Safety stderr: {result.stderr[:500]}...")
            
            if result.stdout:
                try:
                    safety_data = json.loads(result.stdout)
                    print(f"Found {len(safety_data)} vulnerabilities")
                    for vuln in safety_data[:3]:  # Show first 3
                        print(f"  - {vuln.get('package_name')} {vuln.get('installed_version')}: {vuln.get('vulnerability_id')}")
                except json.JSONDecodeError as e:
                    print(f"Failed to parse JSON: {e}")
                    
        except Exception as e:
            print(f"Error running safety: {e}")

def test_npm_audit_locally():
    """Test npm audit locally with known vulnerable packages."""
    
    # Known vulnerable Node.js packages
    vulnerable_package_json = """
{
  "name": "test-app",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "4.17.4",
    "moment": "2.19.3",
    "express": "4.15.2",
    "axios": "0.18.0",
    "jquery": "3.3.1"
  }
}
"""
    
    print("\nTesting npm audit locally...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        package_json_path = os.path.join(temp_dir, 'package.json')
        
        with open(package_json_path, 'w') as f:
            f.write(vulnerable_package_json)
        
        # Test npm audit
        try:
            command = ['npm', 'audit', '--json']
            result = subprocess.run(command, capture_output=True, text=True, 
                                  check=False, cwd=temp_dir)
            
            print(f"npm audit return code: {result.returncode}")
            print(f"npm audit stdout: {result.stdout[:500]}...")
            print(f"npm audit stderr: {result.stderr[:500]}...")
            
            if result.stdout:
                try:
                    audit_data = json.loads(result.stdout)
                    vulnerabilities = audit_data.get('vulnerabilities', {})
                    print(f"Found {len(vulnerabilities)} vulnerable packages")
                    for pkg_name, vuln_info in list(vulnerabilities.items())[:3]:  # Show first 3
                        print(f"  - {pkg_name}: {vuln_info.get('severity', 'unknown')} severity")
                except json.JSONDecodeError as e:
                    print(f"Failed to parse JSON: {e}")
                    
        except Exception as e:
            print(f"Error running npm audit: {e}")

def main():
    """Run local vulnerability detection tests."""
    print("üîç Testing Vulnerability Detection Tools Locally")
    print("=" * 50)
    
    test_safety_locally()
    test_npm_audit_locally()
    
    print("\n‚úÖ Local testing completed!")

if __name__ == "__main__":
    main()
