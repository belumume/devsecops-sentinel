import os
import json
import re
import logging
import subprocess
import tempfile
from typing import List, Dict, Any
import boto3
import requests
from sentinel_utils.python.utils import get_github_token

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(os.environ.get("LOG_LEVEL", "INFO"))

# Initialize AWS clients
secrets_manager = boto3.client("secretsmanager")

def lambda_handler(event, context):
    """
    Lambda handler that scans for vulnerabilities in dependencies using real tools.
    Supports Python (requirements.txt) and Node.js (package.json).
    """
    logger.info("VulnerabilityScannerFunction invoked - REAL scanning")
    
    try:
        repo_details = event.get("repo_details", {})
        repo_full_name = repo_details.get("repository_full_name", "")
        pr_number = repo_details.get("pr_number", 0)
        commit_sha = repo_details.get("commit_sha", "")
        
        if not repo_full_name:
            raise ValueError("Repository name not provided")
        
        logger.info(f"Scanning repository: {repo_full_name}, PR: {pr_number}")
        
        github_token = get_github_token()
        
        dependency_files = get_dependency_files(repo_full_name, commit_sha, github_token)
        
        all_findings = []
        
        with tempfile.TemporaryDirectory() as temp_dir:
            if "requirements.txt" in dependency_files:
                logger.info("Found requirements.txt, scanning for Python vulnerabilities.")
                python_findings = scan_python_dependencies(dependency_files["requirements.txt"], temp_dir)
                all_findings.extend(python_findings)

            if "package.json" in dependency_files:
                logger.info("Found package.json, scanning for Node.js vulnerabilities.")
                node_findings = scan_node_dependencies(dependency_files["package.json"], temp_dir)
                all_findings.extend(node_findings)

        logger.info(f"Vulnerability scan completed. Found {len(all_findings)} total vulnerabilities.")
        
        return {
            "statusCode": 200,
            "scanner_type": "vulnerabilities",
            "findings": all_findings,
            "summary": {"total_findings": len(all_findings)}
        }
        
    except Exception as e:
        logger.error(f"Error in vulnerability scanning: {str(e)}", exc_info=True)
        return {
            "statusCode": 500,
            "scanner_type": "vulnerabilities",
            "error": str(e),
            "findings": [],
            "summary": {"total_findings": 0}
        }

def get_dependency_files(repo_full_name: str, commit_sha: str, github_token: str) -> Dict[str, str]:
    """Get dependency files from the repository at a specific commit."""
    dependency_files = {}
    
    files_to_check = ["requirements.txt", "package.json"]
    
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3.raw"
    }
    
    for filename in files_to_check:
        try:
            # Add the commit SHA to the URL to get the file from the correct commit
            file_url = f"https://api.github.com/repos/{repo_full_name}/contents/{filename}?ref={commit_sha}"
            response = requests.get(file_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                dependency_files[filename] = response.text
                logger.info(f"Found dependency file: {filename}")
                
        except requests.exceptions.RequestException as e:
            logger.warning(f"Could not fetch {filename}: {str(e)}")
            continue
    
    return dependency_files

def scan_python_dependencies(requirements_content: str, temp_dir: str) -> List[Dict[str, Any]]:
    """Scans Python dependencies using the 'safety' tool."""
    findings = []
    requirements_path = os.path.join(temp_dir, "requirements.txt")
    
    try:
        with open(requirements_path, "w") as f:
            f.write(requirements_content)
        
        command = ["safety", "check", "--file", requirements_path, "--json"]
        
        result = subprocess.run(command, capture_output=True, text=True, check=False)
        
        if result.returncode != 0:
            try:
                vulnerabilities = json.loads(result.stdout)
                for vuln in vulnerabilities:
                    findings.append({
                        "type": "dependency_vulnerability",
                        "language": "python",
                        "package": vuln.get("package_name"),
                        "version": vuln.get("affected_versions"),
                        "severity": vuln.get("severity", "UNKNOWN").upper(),
                        "description": vuln.get("description"),
                        "vulnerability_id": vuln.get("vulnerability_id"),
                        "file": "requirements.txt"
                    })
            except json.JSONDecodeError:
                logger.error(f"Failed to parse safety JSON output. stderr: {result.stderr}")

    except Exception as e:
        logger.error(f"An error occurred during Python vulnerability scanning: {e}", exc_info=True)
    
    return findings

def scan_node_dependencies(package_json_content: str, temp_dir: str) -> List[Dict[str, Any]]:
    """Scans Node.js dependencies using 'npm audit'."""
    findings = []
    package_json_path = os.path.join(temp_dir, "package.json")

    try:
        with open(package_json_path, "w") as f:
            f.write(package_json_content)

        command = ["npm", "audit", "--json", "--prefix", temp_dir]
        
        result = subprocess.run(command, capture_output=True, text=True, check=False)

        if result.returncode != 0:
            try:
                audit_data = json.loads(result.stdout)
                vulnerabilities = audit_data.get("vulnerabilities", {})
                for name, vuln_details in vulnerabilities.items():
                    findings.append({
                        "type": "dependency_vulnerability",
                        "language": "nodejs",
                        "package": name,
                        "severity": vuln_details.get("severity", "UNKNOWN").upper(),
                        "description": f"{vuln_details.get('via')[0].get('title') if isinstance(vuln_details.get('via'), list) and vuln_details.get('via') else 'N/A'}",
                        "vulnerability_id": f"{vuln_details.get('via')[0].get('source') if isinstance(vuln_details.get('via'), list) and vuln_details.get('via') else 'N/A'}",
                        "file": "package.json"
                    })
            except json.JSONDecodeError:
                logger.error(f"Failed to parse npm audit JSON output. stdout: {result.stdout}, stderr: {result.stderr}")

    except Exception as e:
        logger.error(f"An error occurred during Node.js vulnerability scanning: {e}", exc_info=True)

    return findings