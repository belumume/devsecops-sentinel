---
description: "Documentation about available Cursor rules and how to use them"
globs: []
alwaysApply: false
---
# DevSecOps Sentinel - Cursor Rules

## Overview
These Cursor rules provide comprehensive guidance for developing the DevSecOps Sentinel project, an AI-powered serverless security analysis platform for GitHub Pull Requests.

**Current Status**: Phase 2 Major Milestone Achieved! ðŸŽ‰ | Core Workflow Complete âœ…

## Available Rules

### 1. Main Development Rules
**File**: [devsecops-sentinel.mdc](mdc:devsecops-sentinel.mdc)
- Core development principles and methodology
- Technical stack requirements
- Coding standards and security practices
- Updated architecture (Lambda Authorizer removed)
- Always applied to Python, YAML, and Markdown files

### 2. Phase 2 Development Focus  
**File**: [phase2-development.mdc](mdc:phase2-development.mdc)
- Current implementation priorities and task breakdown
- AggregatorFunction implementation (blocking Step Functions)
- Scanner implementation guidelines and templates
- GitHub integration requirements
- Auto-applied when working with Lambda function code

### 3. AWS SAM Infrastructure Rules  
**File**: [sam-infrastructure.mdc](mdc:sam-infrastructure.mdc)
- SAM template structure and requirements
- Lambda function configuration and IAM roles
- Deployment configuration and best practices
- Auto-applied when working with template.yaml or deployment files

### 4. Testing Strategy Rules
**File**: [testing-strategy.mdc](mdc:testing-strategy.mdc)
- Unit testing with pytest and moto
- Integration and E2E testing approaches
- Coverage requirements and CI/CD setup
- Auto-applied when working with test files

### 5. AI Integration Rules
**File**: [ai-integration.mdc](mdc:ai-integration.mdc)
- Amazon Bedrock configuration and setup
- Prompt engineering and error handling
- Cost optimization techniques
- Auto-applied when working with AI-related code

## Quick Reference

### Current Architecture (Phase 1 Complete)
- Event-driven serverless using AWS Lambda
- Orchestrated by AWS Step Functions (AnalysisStateMachine)
- Triggered by GitHub webhooks via API Gateway
- Webhook validation in WebhookHandlerFunction (simplified)
- SecretScannerFunction PoC working
- Parallel execution ready for all scanners

### Phase 2 Priorities
1. **AggregatorFunction** - Unblock Step Functions execution
2. **VulnerabilityScannerFunction** - Dependency vulnerability scanning  
3. **AIReviewerFunction** - Bedrock-powered code review
4. **GitHub Integration** - PR comment posting

### Critical Principles
- **Infrastructure as Code**: Everything in [template.yaml](mdc:template.yaml)
- **Security First**: Validate webhooks, secure credentials in Secrets Manager
- **Test Everything**: Unit tests required for business logic
- **No Manual AWS Changes**: All through SAM/IaC
- **Documentation Driven**: README.md and Project_Summary.md are deliverables 