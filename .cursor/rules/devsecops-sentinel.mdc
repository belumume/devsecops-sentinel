---
description: "Core development rules for DevSecOps Sentinel - serverless architecture, coding standards, and security practices"
globs: ["**/*.py", "**/*.yaml", "**/*.yml", "**/*.md"]
alwaysApply: true
---
# DevSecOps Sentinel - Development Rules

## Project Overview
DevSecOps Sentinel is an AI-powered, serverless security and quality analysis platform for GitHub Pull Requests.

## Current Project Status
- **Phase 1 Complete**: Core infrastructure deployed and working âœ…
- **Phase 2 Major Milestone**: AggregatorFunction implemented, Step Functions workflow unblocked! ðŸŽ‰
- **End-to-End Success**: GitHub PR â†’ Step Functions â†’ Scanner â†’ Aggregator workflow executing perfectly
- **Next Priority**: Complete GitHub API integration for PR comment posting

## Architecture Principles

### Serverless-First Design
- **ALL** components must be serverless and event-driven
- No EC2 instances, containers, or persistent servers
- Use AWS Lambda for all compute needs
- Infrastructure defined exclusively in template.yaml using AWS SAM

### Core Architecture Components
1. **API Gateway** - Webhook endpoint (direct integration)
2. **Step Functions** - Orchestrates parallel analysis workflow
3. **Lambda Functions**:
   - WebhookHandlerFunction - Processes and validates GitHub webhooks
   - SecretScannerFunction - Detects hardcoded credentials
   - VulnerabilityScannerFunction - Checks dependencies (to be implemented)
   - AIReviewerFunction - AI-powered code review (to be implemented)
   - AggregatorFunction - Consolidates results and posts to GitHub (to be implemented)
4. **DynamoDB** - Audit logging (ScansTable)
5. **Secrets Manager** - GitHub API token and webhook secret storage
6. **Bedrock** - AI model (Claude 3.5 Sonnet)

## Development Methodology

### Core Development Rules
1. **Infrastructure as Code**: NO manual AWS resource creation
2. **Incremental Development**: One change at a time
3. **Testing First**: Unit tests with pytest/moto required
4. **Security First**: Validate webhooks, secure token storage
5. **Documentation Driven**: Maintain README.md and Project_Summary.md

## Technical Stack

### Required Technologies
- **Language**: Python 3.11
- **IaC**: AWS SAM (template.yaml)
- **Testing**: pytest with moto for AWS mocking
- **AI Model**: anthropic.claude-3-5-sonnet-20240620-v1:0
- **Key Libraries**: boto3, requests, py-safety, trufflehog

### AWS Services
- Lambda, Step Functions, API Gateway
- DynamoDB, Secrets Manager, IAM
- S3 (static hosting), Bedrock

## Security Requirements

### Mandatory Security Practices
1. **Webhook Security**: Signature validation in WebhookHandlerFunction using HMAC-SHA256
2. **Token Management**: GitHub token and webhook secret in Secrets Manager only
3. **IAM Principles**: Least privilege for each Lambda role
4. **No Hardcoded Secrets**: Use environment variables referencing Secrets Manager

## Current Implementation Notes
- WebhookHandlerFunction validates GitHub signatures and starts Step Functions execution âœ…
- SecretScannerFunction enhanced with standardized response format âœ…  
- AggregatorFunction consolidates results, formats GitHub comments, logs to DynamoDB âœ…
- AnalysisStateMachine executes successfully with parallel Map state âœ…
- **Complete workflow proven**: GitHub PR events â†’ SUCCEEDED Step Functions executions
- **Performance excellent**: Sub-second to 2-second execution times
- **Next milestone**: GitHub API integration for PR comment posting

## Common Pitfalls to Avoid
- Don't create resources manually in AWS Console
- Don't hardcode any credentials or secrets
- Don't skip error handling in Lambda functions
- Don't forget to update Project_Summary.md
- Don't exceed Lambda timeout limits 