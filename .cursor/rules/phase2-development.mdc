---
description:
globs:
alwaysApply: false
---
# Phase 2 Development - Scanner Implementation & GitHub Integration

## Current Status
ðŸŽ‰ **MAJOR MILESTONE ACHIEVED** - AggregatorFunction implemented and Step Functions workflow UNBLOCKED! âœ…
- End-to-end GitHub PR â†’ Step Functions â†’ Scanner â†’ Aggregator workflow working perfectly
- Sub-second execution times with **SUCCEEDED** status
- DynamoDB audit logging confirmed working
- Infrastructure rock-solid and deployment-ready

## Phase 2 Objectives  
Complete the analysis pipeline with full GitHub feedback loop and additional scanners.

## Updated Priority Implementation Order

### 1. GitHub API Integration (CURRENT HIGH PRIORITY)
**Status**: AggregatorFunction structure complete, needs GitHub token integration

**File**: `src/lambdas/aggregator/app.py` - Update `post_github_comment()` function
**Requirements**:
- Retrieve GitHub token from Secrets Manager  
- Implement GitHub REST API v4 comment posting
- Test complete feedback loop with real PR comments
- Handle GitHub API rate limits and errors

### 2. VulnerabilityScannerFunction (NEXT PRIORITY)
**File**: `src/lambdas/vulnerability_scanner/app.py`
**Requirements**:
- Clone repository at specific commit
- Scan requirements.txt and package.json for vulnerabilities
- Use py-safety or similar library
- Return structured findings

### 3. AIReviewerFunction
**File**: `src/lambdas/ai_reviewer/app.py`
**Requirements**:
- Clone repository and identify changed files
- Send code to Amazon Bedrock (Claude 3.5 Sonnet)
- Use engineered prompt for code quality analysis
- Return structured AI suggestions

## Implementation Guidelines

### Function Structure Template
```python
import json
import os
import boto3
from typing import Dict, List, Any

def lambda_handler(event: Dict[str, Any], context) -> Dict[str, Any]:
    """
    [Function purpose]
    """
    try:
        # Extract payload from Step Functions
        payload = event.get('Payload', event)
        repo_details = payload.get('repo_details', {})
        
        # Implement scanner logic
        findings = perform_scan(repo_details)
        
        return {
            'statusCode': 200,
            'scanner_type': '[scanner_name]',
            'findings': findings,
            'repo_details': repo_details
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'scanner_type': '[scanner_name]',
            'error': str(e),
            'findings': []
        }
```

### Error Handling Strategy
- All scanner functions must handle failures gracefully
- Return consistent error structure for aggregator processing
- Log errors to CloudWatch for debugging
- Don't let one scanner failure break entire workflow

### Template.yaml Updates Needed
1. Add missing function resources (VulnerabilityScannerFunction, AIReviewerFunction, AggregatorFunction)
2. Update StateMachineRole permissions for all functions
3. Add Map state configuration for all three scanners
4. Configure appropriate timeouts and memory for each function type

### Testing Requirements
- Unit tests for each scanner function
- Mocked AWS service calls using moto
- Test error scenarios and edge cases
- End-to-end testing via sentinel-testbed repository

## Completed Achievements âœ…
1. âœ… **AggregatorFunction implemented** - Professional result consolidation and DynamoDB logging
2. âœ… **Step Functions workflow unblocked** - End-to-end execution with SUCCEEDED status  
3. âœ… **SecretScannerFunction enhanced** - Standardized response format for seamless aggregation
4. âœ… **Infrastructure fully deployed** - All AWS resources working perfectly
5. âœ… **Performance optimized** - Sub-second to 2-second execution times
6. âœ… **Error resilience built-in** - Graceful handling of scanner failures

## Next Session Focus (Updated Priorities)
1. **GitHub API Integration** - Complete the `post_github_comment()` function in AggregatorFunction
2. **End-to-End Testing** - Verify complete workflow with GitHub comment posting
3. **VulnerabilityScannerFunction** - Add Python dependency vulnerability scanning
4. **AIReviewerFunction** - Add Amazon Bedrock-powered code quality analysis

## GitHub Integration Implementation Details
- âœ… GitHub token storage planned in Secrets Manager (IAM permissions already configured)
- âœ… Markdown comment formatting completed in `format_github_comment()` function
- ðŸ”„ **Next**: Implement actual GitHub REST API v4 posting in `post_github_comment()`
- ðŸ”„ **Test**: Verify complete feedback loop with real PR comments
